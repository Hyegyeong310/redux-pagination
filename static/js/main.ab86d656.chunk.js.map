{"version":3,"sources":["actions/index.js","components/Card.js","components/Loader.js","components/Pagination.js","App.js","reducers/post.js","reducers/index.js","sagas/post.js","sagas/index.js","index.js"],"names":["ActionTypes","POSTS_GET_REQUEST","POSTS_GET_SUCCESS","POSTS_GET_FAILURE","POST_GET_REQUEST","POST_GET_SUCCESS","POST_GET_FAILURE","CardComponent","post","useSelector","state","Card","style","width","minHeight","className","Body","Title","title","Text","content","ListGroup","variant","Item","createdAt","Loader","Spinner","animation","PaginationComponent","dispatch","useDispatch","total","activeId","useState","firstDisabled","setFirstDisabled","lastDisabled","setLastDisabled","displayedRange","setDisplayedRange","useEffect","onClickPrevOrFirst","useCallback","isFirst","type","data","onClickGoNextOrLast","isLast","onClickPage","page","Pagination","marginTop","First","onClick","disabled","Prev","active","Ellipsis","map","key","Next","Last","App","isShow","isLoading","initialState","posts","fail","message","reducer","action","producer","draft","length","rootReducer","combineReducers","watchPosts","watchPost","userSaga","postsAPI","Axios","get","call","put","takeLatest","postAPI","all","fork","rootSaga","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab86d656.chunk.js","sourcesContent":["const ActionTypes = {\n  // 전체 데이터\n  POSTS_GET_REQUEST: \"posts/POSTS_GET_REQUEST\",\n  POSTS_GET_SUCCESS: \"posts/POSTS_GET_SUCCESS\",\n  POSTS_GET_FAILURE: \"posts/POSTS_GET_FAILURE\",\n\n  // 각 id (= page) 별 데이터\n  POST_GET_REQUEST: \"post/POST_GET_REQUEST\",\n  POST_GET_SUCCESS: \"post/POST_GET_SUCCESS\",\n  POST_GET_FAILURE: \"post/POST_GET_FAILURE\",\n};\n\nexport default ActionTypes;\n","import React from \"react\";\nimport { Card, ListGroup } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\n\nfunction CardComponent() {\n  const { post } = useSelector((state) => state.post);\n  return (\n    <Card style={{ width: \"50rem\", minHeight: 400 }} className=\"text-center\">\n      <Card.Body>\n        <Card.Title>{post.title}</Card.Title>\n        <Card.Text>{post.content}</Card.Text>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item>{post.createdAt}</ListGroup.Item>\n          <ListGroup.Item>{post.createdAt}</ListGroup.Item>\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default CardComponent;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nfunction Loader() {\n  return (\n    <div className=\"loading-container\">\n      <Spinner animation=\"border\" variant=\"primary\" />\n    </div>\n  );\n}\n\nexport default Loader;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Pagination } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ActionTypes from \"../actions\";\n\nfunction PaginationComponent() {\n  const dispatch = useDispatch();\n  const { total, activeId } = useSelector((state) => state.post);\n  const [firstDisabled, setFirstDisabled] = useState(false);\n  const [lastDisabled, setLastDisabled] = useState(false);\n  const [displayedRange, setDisplayedRange] = useState([2, 3, 4, 5, 6]);\n\n  useEffect(() => {\n    if (activeId === 1) {\n      setFirstDisabled(true);\n    }\n    if (activeId === total) {\n      setLastDisabled(true);\n    }\n  }, [activeId, total]);\n\n  useEffect(() => {\n    if (activeId >= 4 && activeId < total - 2) {\n      setDisplayedRange([\n        activeId - 2,\n        activeId - 1,\n        activeId,\n        activeId + 1,\n        activeId + 2,\n      ]);\n    } else if (activeId >= total - 2) {\n      setDisplayedRange([\n        total - 5,\n        total - 4,\n        total - 3,\n        total - 2,\n        total - 1,\n      ]);\n    }\n  }, [activeId, total]);\n\n  const onClickPrevOrFirst = useCallback(\n    (isFirst = false) => {\n      if (activeId === 1) return;\n      dispatch({\n        type: ActionTypes.POST_GET_REQUEST,\n        data: isFirst ? 1 : activeId - 1,\n      });\n    },\n    [activeId, dispatch]\n  );\n\n  const onClickGoNextOrLast = useCallback(\n    (isLast = false) => {\n      if (activeId === total) return;\n      dispatch({\n        type: ActionTypes.POST_GET_REQUEST,\n        data: isLast ? total : activeId + 1,\n      });\n    },\n    [activeId, dispatch, total]\n  );\n\n  const onClickPage = useCallback(\n    (page) => {\n      dispatch({\n        type: ActionTypes.POST_GET_REQUEST,\n        data: page,\n      });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Pagination style={{ marginTop: 10 }}>\n      <Pagination.First\n        onClick={() => onClickPrevOrFirst(true)}\n        disabled={firstDisabled}\n      />\n      <Pagination.Prev\n        onClick={() => onClickPrevOrFirst()}\n        disabled={firstDisabled}\n      />\n      <Pagination.Item onClick={() => onClickPage(1)} active={activeId === 1}>\n        {1}\n      </Pagination.Item>\n      <Pagination.Ellipsis disabled />\n      {displayedRange.map((page) => (\n        <Pagination.Item\n          key={page}\n          active={page === activeId}\n          onClick={() => onClickPage(page)}\n        >\n          {page}\n        </Pagination.Item>\n      ))}\n      <Pagination.Ellipsis disabled />\n      <Pagination.Item\n        onClick={() => onClickPage(total)}\n        active={activeId === total}\n      >\n        {total}\n      </Pagination.Item>\n      <Pagination.Next\n        onClick={() => onClickGoNextOrLast()}\n        disabled={lastDisabled}\n      />\n      <Pagination.Last\n        onClick={() => onClickGoNextOrLast(true)}\n        disabled={lastDisabled}\n      />\n    </Pagination>\n  );\n}\n\nexport default PaginationComponent;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ActionTypes from \"./actions\";\nimport CardComponent from \"./components/Card\";\nimport Loader from \"./components/Loader\";\nimport Pagination from \"./components/Pagination\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { isShow, isLoading } = useSelector((state) => state.post);\n\n  useEffect(() => {\n    dispatch({\n      type: ActionTypes.POSTS_GET_REQUEST,\n    });\n    dispatch({\n      type: ActionTypes.POST_GET_REQUEST,\n      data: 1,\n    });\n  }, [dispatch]);\n\n  if (isLoading) return <Loader />;\n  return (\n    <div className=\"App\">\n      <div className=\"card-container\">\n        <CardComponent />\n        {isShow && <Pagination />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import producer from \"immer\";\nimport ActionTypes from \"../actions\";\n\nexport const initialState = {\n  isShow: false,\n  isLoading: false,\n  activeId: 1, // page 역할\n  total: 0, // 전체 페이지\n  posts: [],\n  post: {},\n  fail: {\n    message: \"\",\n  },\n};\n\nconst reducer = (state = initialState, action) => {\n  const { type, data } = action;\n  return producer(state, (draft) => {\n    switch (type) {\n      case ActionTypes.POSTS_GET_REQUEST: {\n        draft.total = 0;\n        draft.posts = [];\n        draft.fail = initialState.fail;\n        break;\n      }\n      case ActionTypes.POSTS_GET_SUCCESS: {\n        draft.total = data.data.length;\n        draft.posts = data.data;\n        break;\n      }\n      case ActionTypes.POSTS_GET_FAILURE: {\n        draft.total = 0;\n        draft.posts = [];\n        draft.fail = {\n          message: \"Posts Get Error\",\n        };\n        break;\n      }\n      case ActionTypes.POST_GET_REQUEST: {\n        // 요청할 때는 데아터를 새로 받기 때문에 초기화해주는 게 좋음.\n        draft.isShow = false;\n        draft.isLoading = true;\n        draft.activeId = data;\n        draft.post = {};\n        draft.fail = initialState.fail;\n        break;\n      }\n      case ActionTypes.POST_GET_SUCCESS: {\n        draft.isShow = true;\n        draft.isLoading = false;\n        draft.post = data.data;\n        break;\n      }\n      case ActionTypes.POST_GET_FAILURE: {\n        draft.isShow = false;\n        draft.isLoading = false;\n        draft.post = {};\n        draft.fail = {\n          message: \"Post Get Error\",\n        };\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  });\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport post from \"./post\";\n\nconst rootReducer = combineReducers({\n  post,\n});\n\nexport default rootReducer;\n","import Axios from \"axios\";\nimport { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport ActionTypes from \"../actions\";\n\n// POSTS GET Request 관련\nfunction postsAPI() {\n  // 사용 url로 수정\n  return Axios.get(\"https://koreanjson.com/posts\");\n}\n\nfunction* posts(action) {\n  try {\n    const data = yield call(postsAPI, action.data);\n    yield put({\n      type: ActionTypes.POSTS_GET_SUCCESS,\n      data,\n    });\n  } catch (e) {\n    yield put({\n      type: ActionTypes.POSTS_GET_FAILURE,\n      data: e,\n    });\n  }\n}\n\nfunction* watchPosts() {\n  yield takeLatest(ActionTypes.POSTS_GET_REQUEST, posts);\n}\n\n// POST GET Request 관련\nfunction postAPI(activeId) {\n  // 사용 url로 수정\n  return Axios.get(`https://koreanjson.com/posts/${activeId}`);\n}\n\nfunction* post(action) {\n  try {\n    const data = yield call(postAPI, action.data);\n    yield put({\n      type: ActionTypes.POST_GET_SUCCESS,\n      data,\n    });\n  } catch (e) {\n    yield put({\n      type: ActionTypes.POST_GET_FAILURE,\n      data: e,\n    });\n  }\n}\n\nfunction* watchPost() {\n  yield takeLatest(ActionTypes.POST_GET_REQUEST, post);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchPosts),\n    fork(watchPost),\n    // 배열 안에 추가하면 됨.\n  ]);\n}\n","import { all, call } from \"redux-saga/effects\";\nimport post from \"./post\";\n\nexport default function* rootSaga() {\n  yield all([\n    call(post),\n    // 배열 안에 추가하면 됨.\n  ]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./sagas\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}